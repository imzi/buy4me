<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>lk.buy4me.web</groupId>
	<artifactId>base-config</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Versions of dependencies -->
		<springVersion>5.1.9.RELEASE</springVersion>
		<aspectjVersion>1.9.0</aspectjVersion>

		<commonsDBCP2Version>2.7.0</commonsDBCP2Version>
		<mysqlConnectorVersion>8.0.17</mysqlConnectorVersion>
	</properties>

	<build>
		<plugins>
			<!-- Find the latest versions of plugins available by running "mvn versions:display-plugin-updates" -->
			<!--
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>versions-maven-plugin</artifactId>
				<version>2.7</version>
				<configuration>
				    <generateBackupPoms>false</generateBackupPoms>
				</configuration>
				</plugin>
		    -->

			<!-- Set Java SE version -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<release>11</release>
				</configuration>
			</plugin>

			<!-- Specify main class in generated Jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.1.2</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>lk.training.spring.App</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<!-- Specify main class to execute from command line: mvn exec:java -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<goals>
							<goal>java</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mainClass>lk.training.spring.App</mainClass>

					<!-- We may prefer to execute as 'mvn exec:exec' to get the execution
						happen in new JVM. -->
					<!-- https://www.mojohaus.org/exec-maven-plugin/examples/example-exec-for-java-programs.html -->
					<executable>java</executable>
					<arguments>
						<argument>-classpath</argument>
						<!-- automatically creates the classpath using all project dependencies,
							also adding the project build directory -->
						<classpath />
						<argument>lk.training.spring.App</argument>
					</arguments>
				</configuration>
			</plugin>

			<!-- To run JUnit Jupiter tests with Java 11. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.0</version>
				<configuration>
					<argLine>
						--illegal-access=permit
					</argLine>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.22.0</version>
				<configuration>
					<argLine>
						--illegal-access=permit
					</argLine>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.junit</groupId>
				<artifactId>junit-bom</artifactId>
				<version>5.5.1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${springVersion}</version>
		</dependency>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

</project>